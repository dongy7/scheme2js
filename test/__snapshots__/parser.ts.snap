// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parses define expression 1`] = `
Program {
  "body": Array [
    DefineExpression {
      "ref": SymbolLiteral {
        "value": "a",
      },
      "value": NumericLiteral {
        "value": "1",
      },
    },
  ],
}
`;

exports[`parses empty program 1`] = `
Program {
  "body": Array [],
}
`;

exports[`parses expr with operator 1`] = `
Program {
  "body": Array [
    CallExpression {
      "params": Array [
        NumericLiteral {
          "value": "1",
        },
        CallExpression {
          "params": Array [
            NumericLiteral {
              "value": "2",
            },
            NumericLiteral {
              "value": "3",
            },
          ],
          "proc": SymbolLiteral {
            "value": "-",
          },
        },
      ],
      "proc": SymbolLiteral {
        "value": "+",
      },
    },
  ],
}
`;

exports[`parses function call 1`] = `
Program {
  "body": Array [
    CallExpression {
      "params": Array [
        NumericLiteral {
          "value": "1",
        },
        NumericLiteral {
          "value": "2",
        },
      ],
      "proc": SymbolLiteral {
        "value": "add",
      },
    },
  ],
}
`;

exports[`parses if expression 1`] = `
Program {
  "body": Array [
    IfExpression {
      "alt": NumericLiteral {
        "value": "4",
      },
      "conseq": NumericLiteral {
        "value": "3",
      },
      "test": CallExpression {
        "params": Array [
          NumericLiteral {
            "value": "1",
          },
          NumericLiteral {
            "value": "2",
          },
        ],
        "proc": SymbolLiteral {
          "value": "eq",
        },
      },
    },
  ],
}
`;

exports[`parses lambda expressions 1`] = `
Program {
  "body": Array [
    LambdaExpression {
      "body": CallExpression {
        "params": Array [
          SymbolLiteral {
            "value": "x",
          },
          SymbolLiteral {
            "value": "y",
          },
        ],
        "proc": SymbolLiteral {
          "value": "+",
        },
      },
      "params": ParameterList {
        "params": Array [
          SymbolLiteral {
            "value": "x",
          },
          SymbolLiteral {
            "value": "y",
          },
        ],
      },
    },
  ],
}
`;

exports[`parses nested function call 1`] = `
Program {
  "body": Array [
    CallExpression {
      "params": Array [
        NumericLiteral {
          "value": "1",
        },
        CallExpression {
          "params": Array [
            NumericLiteral {
              "value": "2",
            },
            NumericLiteral {
              "value": "3",
            },
          ],
          "proc": SymbolLiteral {
            "value": "sub",
          },
        },
      ],
      "proc": SymbolLiteral {
        "value": "add",
      },
    },
  ],
}
`;

exports[`parses nested if expression 1`] = `
Program {
  "body": Array [
    IfExpression {
      "alt": NumericLiteral {
        "value": "6",
      },
      "conseq": CallExpression {
        "params": Array [
          NumericLiteral {
            "value": "4",
          },
          NumericLiteral {
            "value": "5",
          },
        ],
        "proc": SymbolLiteral {
          "value": "add",
        },
      },
      "test": CallExpression {
        "params": Array [
          NumericLiteral {
            "value": "1",
          },
          NumericLiteral {
            "value": "2",
          },
        ],
        "proc": SymbolLiteral {
          "value": "eq",
        },
      },
    },
  ],
}
`;

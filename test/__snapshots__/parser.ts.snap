// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parses define expression 1`] = `
Object {
  "body": Array [
    Object {
      "ref": Object {
        "type": "SymbolLiteral",
        "value": "a",
      },
      "type": "DefineExpr",
      "value": Object {
        "type": "NumberLiteral",
        "value": "1",
      },
    },
  ],
  "type": "Program",
}
`;

exports[`parses empty program 1`] = `
Object {
  "body": Array [],
  "type": "Program",
}
`;

exports[`parses expr with operator 1`] = `
Object {
  "body": Array [
    Object {
      "params": Array [
        Object {
          "type": "NumberLiteral",
          "value": "1",
        },
        Object {
          "params": Array [
            Object {
              "type": "NumberLiteral",
              "value": "2",
            },
            Object {
              "type": "NumberLiteral",
              "value": "3",
            },
          ],
          "proc": Object {
            "type": "SymbolLiteral",
            "value": "-",
          },
          "type": "CallExpression",
        },
      ],
      "proc": Object {
        "type": "SymbolLiteral",
        "value": "+",
      },
      "type": "CallExpression",
    },
  ],
  "type": "Program",
}
`;

exports[`parses function call 1`] = `
Object {
  "body": Array [
    Object {
      "params": Array [
        Object {
          "type": "NumberLiteral",
          "value": "1",
        },
        Object {
          "type": "NumberLiteral",
          "value": "2",
        },
      ],
      "proc": Object {
        "type": "SymbolLiteral",
        "value": "add",
      },
      "type": "CallExpression",
    },
  ],
  "type": "Program",
}
`;

exports[`parses if expression 1`] = `
Object {
  "body": Array [
    Object {
      "alt": Object {
        "type": "NumberLiteral",
        "value": "4",
      },
      "conseq": Object {
        "type": "NumberLiteral",
        "value": "3",
      },
      "test": Object {
        "params": Array [
          Object {
            "type": "NumberLiteral",
            "value": "1",
          },
          Object {
            "type": "NumberLiteral",
            "value": "2",
          },
        ],
        "proc": Object {
          "type": "SymbolLiteral",
          "value": "eq",
        },
        "type": "CallExpression",
      },
      "type": "IfExpr",
    },
  ],
  "type": "Program",
}
`;

exports[`parses nested function call 1`] = `
Object {
  "body": Array [
    Object {
      "params": Array [
        Object {
          "type": "NumberLiteral",
          "value": "1",
        },
        Object {
          "params": Array [
            Object {
              "type": "NumberLiteral",
              "value": "2",
            },
            Object {
              "type": "NumberLiteral",
              "value": "3",
            },
          ],
          "proc": Object {
            "type": "SymbolLiteral",
            "value": "sub",
          },
          "type": "CallExpression",
        },
      ],
      "proc": Object {
        "type": "SymbolLiteral",
        "value": "add",
      },
      "type": "CallExpression",
    },
  ],
  "type": "Program",
}
`;

exports[`parses nested if expression 1`] = `
Object {
  "body": Array [
    Object {
      "alt": Object {
        "type": "NumberLiteral",
        "value": "6",
      },
      "conseq": Object {
        "params": Array [
          Object {
            "type": "NumberLiteral",
            "value": "4",
          },
          Object {
            "type": "NumberLiteral",
            "value": "5",
          },
        ],
        "proc": Object {
          "type": "SymbolLiteral",
          "value": "add",
        },
        "type": "CallExpression",
      },
      "test": Object {
        "params": Array [
          Object {
            "type": "NumberLiteral",
            "value": "1",
          },
          Object {
            "type": "NumberLiteral",
            "value": "2",
          },
        ],
        "proc": Object {
          "type": "SymbolLiteral",
          "value": "eq",
        },
        "type": "CallExpression",
      },
      "type": "IfExpr",
    },
  ],
  "type": "Program",
}
`;
